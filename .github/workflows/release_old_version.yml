name: Release old version

on:
  push:
    branches:
      - '*.x'
  workflow_dispatch:
    inputs:
      version:
        description: Version you want to release. It must follow semver eg "6.0.0"
        required: true
      phase:
        type: choice
        required: true
        description: Select build phase to deploy.
        options:
          - alpha
          - beta
          - release

jobs:
  set-variables:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
      - name: Check Branch
        run: |
          filteroutlist=("develop" "main" "master")
          if [[ ${filteroutlist[*]} =~ "${{ github.ref_name }}" ]]; then
            echo "Can not do this workflow with this branch(${{ github.ref_name }})"
            exit 1
          fi
      - name: Get Version Number
        id: get-version-number
        if: ${{ inputs.phase != 'release' }}
        run: |
          LAST_COMMIT_MESSAGE=$(git log --format=%s -n 1)
          echo "Last commit message is \"${LAST_COMMIT_MESSAGE}\""
          NEXT_VERSION=""
          if [[ "${LAST_COMMIT_MESSAGE}" =~ ^chore:[[:space:]]release[[:space:]](.+)$ ]]; then
            echo "Try to get next version from last commit"
            NEXT_VERSION=${BASH_REMATCH[1]}
          else
            echo "Try to get next version from input and tag"
            lastTag=$(git tag -l --sort=refname "v${{ inputs.version }}-${{ inputs.phase }}.*" | tail -1)
            versionNumber=1
            echo "Last tag is \"${lastTag}\""
            if [ -z "${lastTag}" -a ! -z "${{ inputs.version }}" ]; then
              NEXT_VERSION="${{ inputs.version }}-${{ inputs.phase }}.${versionNumber}"
            elif [ ! -z "${{ inputs.version }}" ]; then
              if [[ "${lastTag}" =~ ^v${{ inputs.version }}-${{ inputs.phase }}.(0|[1-9][0-9]*)$ ]]; then
                versionNumber=$((BASH_REMATCH[1]))
                NEXT_VERSION="${{ inputs.version }}-${{ inputs.phase }}.$((++versionNumber))"
              else
                echo "Last tag is unsupported tag."
              fi
            fi
          fi
          echo "Next version is ${NEXT_VERSION}"
          if [ ! -z "${NEXT_VERSION}" ]; then
            echo "version_number=${versionNumber}"
            echo "version_number=${versionNumber}" >> $GITHUB_OUTPUT
          fi
      - name: Get Release Version
        id: get-version
        if: ${{ steps.get-version-number.outputs.version_number != '' }}
        run: |
          if [ '${{ inputs.phase }}' = 'release' ]; then
            echo "release_version=${{ inputs.version }}"
            echo "release_version=${{ inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "release_version=${{ inputs.version }}-${{ inputs.phase }}.${{ steps.get-version-number.outputs.version_number}}"
            echo "release_version=${{ inputs.version }}-${{ inputs.phase }}.${{ steps.get-version-number.outputs.version_number}}" >> $GITHUB_OUTPUT
          fi
      - name: Check Release Version
        if: ${{ inputs.phase == 'release' }}
        run: |
          if git show-ref --tags --verify --quiet "refs/tags/${{ steps.get-version.outputs.release_version }}"; then
            echo "Already exist tag ${{ steps.get-version.outputs.release_version }}"
            exit 1
          fi
    outputs:
      release_version: ${{ steps.get-version.outputs.release_version }}

  release-please:
    runs-on: ubuntu-latest
    needs: [set-variables]
    if: ${{ needs.set-variables.outputs.release_version != '' }}
    steps:
      - name: Release Please
        uses: google-github-actions/release-please-action@v3
        id: release
        with:
          release-type: simple
          default-branch: ${{ github.ref_name }}
          pull-request-title-pattern: 'chore: release ${version}'
          changelog-types: '[{"type":"feat","section":"Features","hidden":false},{"type":"fix","section":"Bug Fixes","hidden":false},{"type":"refactor","section":"Code Refactoring","hidden":false}]'
          extra-files: gradle.properties
          prerelease: ${{ inputs.phase != 'release' }}
          release-as: ${{ needs.set-variables.outputs.release_version }}
    outputs:
      release_created: ${{ steps.release.outputs.release_created }}
      body: ${{ steps.release.outputs.body }}
  
  publish:
    runs-on: ubuntu-latest
    needs: [ release-please ]
    if: ${{ needs.release-please.outputs.release_created }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
      - name: Publish All (internalDebug, internalRelease, externalRelease)
        run: ls -al ./*
