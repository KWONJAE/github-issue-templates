name: Release old version

on:
  workflow_dispatch:
    branches:
      - '*.x'
    branches-ignore:
      - 'develop'
      - 'main'
      - 'feature/**'
    inputs:
      version:
        description: Version you want to release. It must follow semver eg "6.0.0"
        required: true
      phase:
        type: choice
        required: true
        description: Select build phase to deploy.
        options:
          - alpha
          - beta
          - release

jobs:
  set-variables:
    runs-on: ubuntu-18
    steps:
      - name: Checkout Repo
        uses: gfp-actions/checkout@v3
      - name: Get Version Number
        id: get-version-number
        if: ${{ inputs.phase != 'release' }}
        run: |
          lastTag=$(git tag -l --sort=refname "v${{ inputs.version }}-${{ inputs.phase }}.*" | tail -1)
          versionNumber=1
          echo "Last tag is \"${lastTag}\""
          if [ -z "${lastTag}" ]; then
            NEXT_VERSION="${{ inputs.version }}-${{ inputs.phase }}.${versionNumber}"
          else
            if [[ "${lastTag}" =~ ^v${{ inputs.version }}-${{ inputs.phase }}.(0|[1-9][0-9]*)$ ]]; then
              versionNumber=$((BASH_REMATCH[1]))
              NEXT_VERSION="${{ inputs.version }}-${{ inputs.phase }}.$((++versionNumber))"
            else
              echo "Last tag is unsupported tag."
            fi
          fi
          echo "Next version is ${NEXT_VERSION}"
          echo "version_number=${versionNumber}"
          echo "version_number=${versionNumber}" >> $GITHUB_OUTPUT
      - name: Get Release Version
        id: get-version
        run: |
          if [ '${{ inputs.phase }}' = 'release' ]; then
            echo "release_version=${{ inputs.version }}"
            echo "release_version=${{ inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "release_version=${{ inputs.version }}-${{ inputs.phase }}.${{ steps.get-version-number.outputs.version_number}}"
            echo "release_version=${{ inputs.version }}-${{ inputs.phase }}.${{ steps.get-version-number.outputs.version_number}}" >> $GITHUB_OUTPUT
          fi
      - name: Check Release Version
        if: ${{ inputs.phase == 'release' }}
        run: |
          if git show-ref --tags --verify --quiet "refs/tags/${{ steps.get-version.outputs.release_version }}"; then
            echo "Already exist tag ${{ steps.get-version.outputs.release_version }}"
            exit 1
          fi
    outputs:
      release_version: ${{ steps.get-version.outputs.release_version }}

  release-please:
    runs-on: ubuntu-18
    needs: [set-variables]
    if: ${{ needs.set-variables.outputs.release_version != '' }}
    steps:
      - name: Release Please
        uses: gfp-actions/release-please-action@v1
        id: release
        with:
          release-type: simple
          default-branch: ${{ github.ref_name }}
          pull-request-title-pattern: 'chore: release ${version}'
          changelog-types: '[{"type":"feat","section":"Features","hidden":false},{"type":"fix","section":"Bug Fixes","hidden":false},{"type":"refactor","section":"Code Refactoring","hidden":false}]'
          extra-files: gradle.properties
          prerelease: ${{ inputs.phase != 'release' }}
          release-as: ${{ needs.set-variables.outputs.release_version }}
    outputs:
      release_created: ${{ steps.release.outputs.release_created }}
      body: ${{ steps.release.outputs.body }}
  
  publish:
    runs-on: ubuntu-18
    needs: [ release-please ]
    if: ${{ needs.release-please.outputs.release_created }}
    steps:
      - name: Checkout Repo
        uses: gfp-actions/checkout@v3
      - name: Set up JDK 11
        uses: gfp-actions/setup-java@v3
        with:
          java-version: 11
          distribution: adopt
      - name: Publish All (internalDebug, internalRelease, externalRelease)
        run: ls -al ./*